const tools = require('../server/tools')
const bot = require('../createBot')
const user = require('../database/models/userData')
const {Menu} = require('../objects')
module.exports =  async function isAuth(msg) {
    const condidate = await user.findOne({
        tg_id: msg.chat.id
    })
    if (condidate) {
        if (condidate.isAccepted == 'true') {
            bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', {
                reply_markup: {
                    keyboard: Menu,
                    resize_keyboard:true
                }
            })
        } else if (condidate.isAccepted == 'checking') {
            if (condidate.expirience == '-') {
                bot.sendMessage(msg.chat.id, '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –æ—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n(–û—Ç–≤–µ—Ç—ã –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è—é—Ç, –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)', {
                    reply_markup: {
                        keyboard: [
                            ['–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É']
                        ],
                        resize_keyboard: true
                    }
                })
                bot.sendMessage(msg.chat.id, '1. –ë—ã–ª –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ —Ñ–∏—à–∏–Ω–≥–µ?', {
                    reply_markup: {
                      inline_keyboard: [
                        [{
                          text: "–î–∞",
                          callback_data: "experiance_true"
                        }, {
                          text: "–ù–µ—Ç",
                          callback_data: "experiance_false"
                        }],
                      ]
                    }
                })
            }
            if (condidate.from == '-') {
                bot.sendMessage(msg.chat.id, '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –æ—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n(–û—Ç–≤–µ—Ç—ã –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è—é—Ç, –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)', {
                    reply_markup: {
                        keyboard: [
                            ['–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É']
                        ],
                        resize_keyboard: true
                    }
                })
                bot.sendMessage(msg.chat.id, '2. –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ', {
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: "–†–µ–∫–ª–∞–º–∞",
                                callback_data: "from_ad"
                            }, {
                                text: "–û—Ç –¥—Ä—É–∑–µ–π",
                                callback_data: "from_friend"
                            }],
                            [{
                                text: "–î—Ä—É–≥–æ–µ",
                                callback_data: "from_other"
                            }]
                        ]
                    }
                })
            }
            if (condidate.from != '' && condidate.expirience != '') {
                bot.sendMessage(msg.chat.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–µ—Ç—Å—è, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', {
                    reply_markup: {
                        keyboard: [
                            ['–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É']
                        ],
                        resize_keyboard: true
                    }
                })
            }
        } else if (condidate.isAccepted == 'false') {
            bot.sendMessage(msg.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –æ—Ç–±–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    keyboard: [
                        ['–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É']
                    ],
                    resize_keyboard: true
                }
            })
        }
    } else {
        await bot.sendMessage(msg.chat.id, 'üëÆ‚Äç‚ôÄ')
        bot.sendMessage(msg.chat.id, '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—Éüëáüèª', {
            reply_markup: {
                keyboard: [
                    ["–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"],
                    ['–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É']
                ],
                resize_keyboard: true
            },
            parse_mode: 'HTML'
        })
        let ref_id = 0
        if (msg.text.split(' ')[1]) {
            let condidate = await user.findOne({
                tg_id: msg.text.split(' ')[1]
            })
            if (condidate) {
                ref_id = msg.text.split(' ')[1]
            }
        }
        new user({
            login: msg.chat.username || 'none',
            name: msg.chat.first_name,
            expirience: '-',
            from: '-',
            ban: false,
            tg_id: msg.chat.id,
            reg_date: new Date(),
            ref_id: ref_id,
            balance: 0,
            vip: false,
            isAdmin: false,
        }).save()
    }
}