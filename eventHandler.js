const bot = require('./createBot')
const data = require('./database/models/userData')
const account = require('./database/models/account')
const link = require('./database/models/link')
const StringDate = require('./server/tools').GetStringDate
const sendMessageWK = require('./server/tools').CreateNewMessageWithKeyboard
const sendMessageWIK = require('./server/tools').CreateNewMessageWithInlineKeyboard

const names = {
    'vk': '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
    'inst': 'Instagram',
    'ok': 'OK',
    'fb': 'Facebook',
    'tt': 'TikTok',
    'st': 'Steam',
    'wot': 'World of Tanks',
    'mc': 'Minecraft',
    'tg': 'Telegram',
    'sc': 'SocialClub',
    'sp': 'Samp',
    'ft': 'Fortnite',
    'ml': 'Mail',
    'ya': 'Yandex',
    'gl': 'Google',
    'yh': 'Yahoo',
    'tw': 'Twitter',
    'ds': 'Discord',
    'gj': 'Gaijin',
    'ms': 'Microsoft',
    'pr': 'Payeer',
    'psn': 'PSN',
    'pp': 'PayPal',
    'rb': 'Roblox',
    'az': 'Amazon',
    'qw': 'Qiwi',
    'wm': 'Webmoney',
}
const emptyString = '                                                                                           '

const links = {
    'vk': 'https://vk.com/',
    'inst': 'https://www.instagram.com/',
    'ok': 'https://ok.ru/profile/',
    'fb': 'https://ru-ru.facebook.com/profile.php?id=',
}
async function ShowLinks(callbackQuery) {
    const links = await link.find({
        tg_id: callbackQuery.message.chat.id,
        type: callbackQuery.data.split('_')[1]
    })
    if (links.length > 0) {
        let btnArray = []
        links.forEach(link => {
            btnArray[btnArray.length] = [{
                text: link.link,
                callback_data: 'showLinkInfo' + '_' + link._id
            }]
        })
        btnArray[btnArray.length] = [{
            text: '–ù–∞–∑–∞–¥',
            callback_data: 'showLinksMenu'
        }]
        bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ`, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id,
            reply_markup: {
                inline_keyboard: btnArray
            },
            parse_mode: 'HTML'
        })
    } else {
        bot.editMessageText(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞`, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: 'showLinksMenu'
                    }]
                ]
            },
            parse_mode: 'HTML'
        })
    }
}
async function ShowLinkInfo(callbackQuery) {
    const links = await link.findById({
        _id: callbackQuery.data.split('_')[1]
    }).catch(err => {})
    let c = 0
    bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id)
    bot.sendPhoto(callbackQuery.message.chat.id, links.query[c].image, {
        caption: `–®–∞–±–ª–æ–Ω #${c+1} [${links.query[c].name}]\n\n${links.query[c].description}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>${links.link}/${callbackQuery.message.chat.id.toString(32)}?${c}</code>\n\n\ –ü–µ—Ä–µ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <code>${links.query[c].redirect}</code>`,
        reply_markup: {
            inline_keyboard: [

                links.query[c + 1] ? [{
                    text: '‚û°Ô∏è',
                    callback_data: `showNextLinkQuery_${links._id}_${c}`
                }] : []

            ]
        },
        parse_mode: 'HTML'
    }).catch(err=>{
        bot.sendMessage(msg.chat.id, '(Image Error)–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    })
}
async function showPrevLink(callbackQuery) {
    const links = await link.findById({
        _id: callbackQuery.data.split('_')[1]
    })
    // const user = await data.findOne({
    //     tg_id: callbackQuery.message.chat.id
    // })
    //let redirect = ''
    let c = Number(callbackQuery.data.split('_')[2]) - 1
    // user.redirect.map(e=>{
    //     e.id = callbackQuery.data.split('_')[1] ? redirect = e.redirect : links.query[c].redirect
    //     console.log(e.redirect)
    // })
    await bot.editMessageMedia({
        media: links.query[c].image,
        type: 'photo'
    }, {
        chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'HTML'

    })
    await bot.editMessageCaption(`–®–∞–±–ª–æ–Ω #${c+1} [${links.query[c].name}]\n\n${links.query[c].description}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>${links.link}/${callbackQuery.message.chat.id.toString(32)}?${c}</code>\n\n\ –ü–µ—Ä–µ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <code>${links.query[c].redirect}</code>`, {
        chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
            inline_keyboard: [
                (links.query[c - 1] ? [{
                    text: '‚¨ÖÔ∏è',
                    callback_data: `showPrevLinkQuery_${links._id}_${c}`
                }, {
                    text: '‚û°Ô∏è',
                    callback_data: `showNextLinkQuery_${links._id}_${c}`
                }] : [{
                    text: '‚û°Ô∏è',
                    callback_data: `showNextLinkQuery_${links._id}_${c}`
                }]),
                //[{text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', callback_data:`changeUrl_${links._id}_${c}`}]
            ]
        },
        parse_mode: 'HTML',
    })
}
async function showNextLink(callbackQuery) {
    const links = await link.findById({
        _id: callbackQuery.data.split('_')[1]
    })
    let c = Number(callbackQuery.data.split('_')[2]) + 1
    await bot.editMessageMedia({
        media: links.query[c].image,
        type: 'photo'
    }, {
        chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'HTML'

    })
    await bot.editMessageCaption(`–®–∞–±–ª–æ–Ω #${c+1} [${links.query[c].name}]\n\n${links.query[c].description}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>${links.link}/${callbackQuery.message.chat.id.toString(32)}?${c}</code>\n\n\ –ü–µ—Ä–µ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <code>${links.query[c].redirect}</code>`, {
        chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
            inline_keyboard: [
                (links.query[c + 1] ? [{
                    text: '‚¨ÖÔ∏è',
                    callback_data: `showPrevLinkQuery_${links._id}_${c}`
                }, {
                    text: '‚û°Ô∏è',
                    callback_data: `showNextLinkQuery_${links._id}_${c}`
                }] : [{
                    text: '‚¨ÖÔ∏è',
                    callback_data: `showPrevLinkQuery_${links._id}_${c}`
                }]),
                [{
                    text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                    callback_data: `changeUrl_${links._id}_${c}`
                }]
            ]
        },
        parse_mode: 'HTML',
    })
}
async function NextAccount(callbackQuery) {
    const accounts = await account.find({
        tg_id: callbackQuery.message.chat.id,
        type: callbackQuery.data.split('_')[1]
    })
    let c = Number(callbackQuery.data.split('_')[2]) + 1
    if (accounts[c + 1]) {
        if (callbackQuery.data.split('_')[1] == 'vk') {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n‚öôÔ∏è Token: <code>${accounts[c].token||'-'}</code>\n\nüë• –î—Ä—É–∑–µ–π: ${accounts[c].friends||'-'}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${accounts[c].friends||'-'} \n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '‚¨ÖÔ∏è',
                                callback_data: `prevAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            },
                            {
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        } else {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '‚¨ÖÔ∏è',
                                callback_data: `prevAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            },
                            {
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    } else {
        if (callbackQuery.data.split('_')[1] == 'vk') {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n‚öôÔ∏è Token: <code>${accounts[c].token||'-'}</code>\n\nüë• –î—Ä—É–∑–µ–π: ${accounts[c].friends||'-'}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${accounts[c].friends||'-'} \n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '‚¨ÖÔ∏è',
                                callback_data: `prevAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            },
                            {
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        } else {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '‚¨ÖÔ∏è',
                                callback_data: `prevAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            },
                            {
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        }

    }
}
async function PreviousAccount(callbackQuery) {
    const accounts = await account.find({
        tg_id: callbackQuery.message.chat.id,
        type: callbackQuery.data.split('_')[1]
    })
    let c = Number(callbackQuery.data.split('_')[2]) - 1
    if (accounts[c - 1]) {
        if (callbackQuery.data.split('_')[1] == 'vk') {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n‚öôÔ∏è Token: <code>${accounts[c].token||'-'}</code>\n\nüë• –î—Ä—É–∑–µ–π: ${accounts[c].friends||'-'}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${accounts[c].friends||'-'} \n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '‚¨ÖÔ∏è',
                                callback_data: `prevAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            },
                            {
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        } else {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '‚¨ÖÔ∏è',
                                callback_data: `prevAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            },
                            {
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    } else {
        if (callbackQuery.data.split('_')[1] == 'vk') {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n‚öôÔ∏è Token: <code>${accounts[c].token||'-'}</code>\n\nüë• –î—Ä—É–∑–µ–π: ${accounts[c].friends||'-'}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${accounts[c].friends||'-'} \n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        } else {
            bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                            }
                        ],
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    }
}
async function ShowAccounts(callbackQuery) {
    const accounts = await account.find({
        tg_id: callbackQuery.message.chat.id,
        type: callbackQuery.data.split('_')[1]
    })
    let c = 0
    if (accounts.length > 0) {
        if (accounts.length > 1) {
            if (callbackQuery.data.split('_')[1] == 'vk') {
                bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n‚öôÔ∏è Token: <code>${accounts[c].token||'-'}</code>\n\nüë• –î—Ä—É–∑–µ–π: ${accounts[c].friends||'-'}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${accounts[c].friends||'-'} \n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                    text: '–°—Å—ã–ª–∫–∞',
                                    url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                                },
                                {
                                    text: '‚û°Ô∏è',
                                    callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                                }
                            ],
                        ]
                    },
                    parse_mode: 'HTML'
                }).catch(err => {
                    console.log(err)
                })
            } else {
                bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                    text: '–°—Å—ã–ª–∫–∞',
                                    url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                                },
                                {
                                    text: '‚û°Ô∏è',
                                    callback_data: `nextAcc_${callbackQuery.data.split('_')[1]}_${c}`
                                }
                            ],
                        ]
                    },
                    parse_mode: 'HTML'
                }).catch(err => {
                    console.log('2')
                })
            }
        } else {
            if (callbackQuery.data.split('_')[1] == 'vk') {
                bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n‚öôÔ∏è Token: <code>${accounts[c].token||'-'}</code>\n\nüë• –î—Ä—É–∑–µ–π: ${accounts[c].friends||'-'}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${accounts[c].friends||'-'} \n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            }],
                        ]
                    },
                    parse_mode: 'HTML'
                }).catch(err => {
                    console.log('3')
                })
            } else {
                bot.editMessageText(`–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ${names[callbackQuery.data.split('_')[1]]} [–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - ${accounts.length}]\n\nüë§ Login: <code>${accounts[c].login}</code>\nüîë Password: <code>${accounts[c].password}</code>\n\nüïí –î–∞—Ç–∞: ${accounts[c].date}\nüî© IP: ${accounts[c].token||'-'}\nüñ• Fake: ${accounts[c].fake||'-'}\n${emptyString}[${c+1}/${accounts.length}]`, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–°—Å—ã–ª–∫–∞',
                                url: links[callbackQuery.data.split('_')[1]] + accounts[c].id
                            }],
                        ]
                    },
                    parse_mode: 'HTML'
                }).catch(err => {
                    console.log('4')
                })
            }

        }
    } else {
        bot.editMessageText(`–£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ${names[callbackQuery.data.split('_')[1]]}`, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: 'showAccs_all'
                    }]
                ]
            },
            parse_mode: 'HTML'
        }).catch(err => {
            console.log('5')
        })
    }
}
async function ShowPrevAccsReplay(callbackQuery) {
    const ReplayList = [
        [{
            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
            callback_data: 'showAccs_vk'
        }, {
            text: 'Instagram',
            callback_data: 'showAccs_inst'
        }],
        [{
            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
            callback_data: 'showAccs_ok'
        }, {
            text: 'Facebook',
            callback_data: 'showAccs_fb'
        }],
        [{
            text: 'TikTok',
            callback_data: 'showAccs_tt'
        }, {
            text: 'Steam',
            callback_data: 'showAccs_st'
        }],

        [{
            text: 'World of Tanks',
            callback_data: 'showAccs_wot'
        }, {
            text: 'Minecraft',
            callback_data: 'showAccs_mc'
        }],
        [{
            text: 'Telegram',
            callback_data: 'showAccs_tg'
        }, {
            text: 'SocialClub',
            callback_data: 'showAccs_sc'
        }],
        [{
            text: 'Samp',
            callback_data: 'showAccs_sp'
        }, {
            text: 'Fortnite',
            callback_data: 'showAccs_ft'
        }],
        [{
            text: 'Mail',
            callback_data: 'showAccs_ml'
        }, {
            text: 'Yandex',
            callback_data: 'showAccs_ya'
        }],
        [{
            text: 'Google',
            callback_data: 'showAccs_gl'
        }, {
            text: 'Yahoo',
            callback_data: 'showAccs_yh'
        }],
        [{
            text: 'Twitter',
            callback_data: 'showAccs_tw'
        }, {
            text: 'Discord',
            callback_data: 'showAccs_ds'
        }],
        [{
            text: 'Gaijin',
            callback_data: 'showAccs_gj'
        }, {
            text: 'Microsoft',
            callback_data: 'showAccs_ms'
        }],
        [{
            text: 'Payeer',
            callback_data: 'showAccs_pr'
        }, {
            text: 'PSN',
            callback_data: 'showAccs_psn'
        }],
        [{
            text: 'PayPal',
            callback_data: 'showAccs_pp'
        }, {
            text: 'PSN',
            callback_data: 'showAccs_psn'
        }],
        [{
            text: 'Roblox',
            callback_data: 'showAccs_rb'
        }, {
            text: 'Amazon',
            callback_data: 'showAccs_az'
        }],
        [{
            text: 'Qiwi',
            callback_data: 'showAccs_qw'
        }, {
            text: 'Webmoney',
            callback_data: 'showAccs_wm'
        }],
    ]
    let id = Number(callbackQuery.data.split('_')[1])
    await bot.editMessageText(callbackQuery.message.text,
        {chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
            inline_keyboard: [
                ReplayList[id-3]? ReplayList[id-3]:[],
                ReplayList[id-2]? ReplayList[id-2]:[],
                ReplayList[id-1] ? ReplayList[id-1]:[],
                ReplayList[id-4] ? [{text:'‚¨ÖÔ∏è', callback_data: 'prevAccsReplay_'+Number(id-3)},{text:'‚û°Ô∏è', callback_data: 'nextAccsReplay_'+Number(id)}] : [{text:'‚û°Ô∏è', callback_data: 'nextAccsReplay_'+Number(id)}]
            ]
        }
    }).catch(err => {})
}
async function ShowNextAccsReplay(callbackQuery) {
    const ReplayList = [
        [{
            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
            callback_data: 'showAccs_vk'
        }, {
            text: 'Instagram',
            callback_data: 'showAccs_inst'
        }],
        [{
            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
            callback_data: 'showAccs_ok'
        }, {
            text: 'Facebook',
            callback_data: 'showAccs_fb'
        }],
        [{
            text: 'TikTok',
            callback_data: 'showAccs_tt'
        }, {
            text: 'Steam',
            callback_data: 'showAccs_st'
        }],

        [{
            text: 'World of Tanks',
            callback_data: 'showAccs_wot'
        }, {
            text: 'Minecraft',
            callback_data: 'showAccs_mc'
        }],
        [{
            text: 'Telegram',
            callback_data: 'showAccs_tg'
        }, {
            text: 'SocialClub',
            callback_data: 'showAccs_sc'
        }],
        [{
            text: 'Samp',
            callback_data: 'showAccs_sp'
        }, {
            text: 'Fortnite',
            callback_data: 'showAccs_ft'
        }],
        [{
            text: 'Mail',
            callback_data: 'showAccs_ml'
        }, {
            text: 'Yandex',
            callback_data: 'showAccs_ya'
        }],
        [{
            text: 'Google',
            callback_data: 'showAccs_gl'
        }, {
            text: 'Yahoo',
            callback_data: 'showAccs_yh'
        }],
        [{
            text: 'Twitter',
            callback_data: 'showAccs_tw'
        }, {
            text: 'Discord',
            callback_data: 'showAccs_ds'
        }],
        [{
            text: 'Gaijin',
            callback_data: 'showAccs_gj'
        }, {
            text: 'Microsoft',
            callback_data: 'showAccs_ms'
        }],
        [{
            text: 'Payeer',
            callback_data: 'showAccs_pr'
        }, {
            text: 'PayPal',
            callback_data: 'showAccs_pp'
        }],
        [{
            text: 'Roblox',
            callback_data: 'showAccs_rb'
        }, {
            text: 'Amazon',
            callback_data: 'showAccs_az'
        }],
        [{
            text: 'Qiwi',
            callback_data: 'showAccs_qw'
        }, {
            text: 'Webmoney',
            callback_data: 'showAccs_wm'
        }],
    ]
    let id = Number(callbackQuery.data.split('_')[1])
    await bot.editMessageText(callbackQuery.message.text,
        {chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
            inline_keyboard: [
                ReplayList[id]?ReplayList[id]:[],
                ReplayList[id+1]?ReplayList[id+1]:[],
                ReplayList[id+2] ? ReplayList[id+2]:[],
                ReplayList[id+3] ? [{text:'‚¨ÖÔ∏è', callback_data: 'prevAccsReplay_'+id},{text:'‚û°Ô∏è', callback_data: 'nextAccsReplay_'+Number(id+3)}] : [{text:'‚¨ÖÔ∏è', callback_data: 'prevAccsReplay_'+id}]
            ]
        }
    }).catch(err => {})
}
async function ShowPrevLinksReplay(callbackQuery) {
    const ReplayList = [
        [{
            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
            callback_data: 'showLinks_vk'
        }, {
            text: 'Instagram',
            callback_data: 'showLinks_inst'
        }],
        [{
            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
            callback_data: 'showLinks_ok'
        }, {
            text: 'Facebook',
            callback_data: 'showLinks_fb'
        }],
        [{
            text: 'TikTok',
            callback_data: 'showLinks_tt'
        }, {
            text: 'Steam',
            callback_data: 'showLinks_st'
        }],

        [{
            text: 'World of Tanks',
            callback_data: 'showLinks_wot'
        }, {
            text: 'Minecraft',
            callback_data: 'showLinks_mc'
        }],
        [{
            text: 'Telegram',
            callback_data: 'showLinks_tg'
        }, {
            text: 'SocialClub',
            callback_data: 'showLinks_sc'
        }],
        [{
            text: 'Samp',
            callback_data: 'showLinks_sp'
        }, {
            text: 'Fortnite',
            callback_data: 'showLinks_ft'
        }],
        [{
            text: 'Mail',
            callback_data: 'showLinks_ml'
        }, {
            text: 'Yandex',
            callback_data: 'showLinks_ya'
        }],
        [{
            text: 'Google',
            callback_data: 'showLinks_gl'
        }, {
            text: 'Yahoo',
            callback_data: 'showLinks_yh'
        }],
        [{
            text: 'Twitter',
            callback_data: 'showLinks_tw'
        }, {
            text: 'Discord',
            callback_data: 'showLinks_ds'
        }],
        [{
            text: 'Gaijin',
            callback_data: 'showLinks_gj'
        }, {
            text: 'Microsoft',
            callback_data: 'showLinks_ms'
        }],
        [{
            text: 'Payeer',
            callback_data: 'showLinks_pr'
        }, {
            text: 'PayPal',
            callback_data: 'showLinks_pp'
        }],
        [{
            text: 'Roblox',
            callback_data: 'showLinks_rb'
        }, {
            text: 'Amazon',
            callback_data: 'showLinks_az'
        }],
        [{
            text: 'Qiwi',
            callback_data: 'showLinks_qw'
        }, {
            text: 'Webmoney',
            callback_data: 'showLinks_wm'
        }],
    ]
    let id = Number(callbackQuery.data.split('_')[1])
    await bot.editMessageText(callbackQuery.message.text,
        {chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
            inline_keyboard: [
                ReplayList[id-3]? ReplayList[id-3]:[],
                ReplayList[id-2]? ReplayList[id-2]:[],
                ReplayList[id-1] ? ReplayList[id-1]:[],
                ReplayList[id-4] ? [{text:'‚¨ÖÔ∏è', callback_data: 'prevLinksReplay_'+Number(id-3)},{text:'‚û°Ô∏è', callback_data: 'nextLinksReplay_'+Number(id)}] : [{text:'‚û°Ô∏è', callback_data: 'nextLinksReplay_'+Number(id)}]
            ]
        }
    }).catch(err => {})
}
async function ShowNextLinksReplay(callbackQuery) {
    const ReplayList = [
        [{
            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
            callback_data: 'showLinks_vk'
        }, {
            text: 'Instagram',
            callback_data: 'showLinks_inst'
        }],
        [{
            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
            callback_data: 'showLinks_ok'
        }, {
            text: 'Facebook',
            callback_data: 'showLinks_fb'
        }],
        [{
            text: 'TikTok',
            callback_data: 'showLinks_tt'
        }, {
            text: 'Steam',
            callback_data: 'showLinks_st'
        }],

        [{
            text: 'World of Tanks',
            callback_data: 'showLinks_wot'
        }, {
            text: 'Minecraft',
            callback_data: 'showLinks_mc'
        }],
        [{
            text: 'Telegram',
            callback_data: 'showLinks_tg'
        }, {
            text: 'SocialClub',
            callback_data: 'showLinks_sc'
        }],
        [{
            text: 'Samp',
            callback_data: 'showLinks_sp'
        }, {
            text: 'Fortnite',
            callback_data: 'showLinks_ft'
        }],
        [{
            text: 'Mail',
            callback_data: 'showLinks_ml'
        }, {
            text: 'Yandex',
            callback_data: 'showLinks_ya'
        }],
        [{
            text: 'Google',
            callback_data: 'showLinks_gl'
        }, {
            text: 'Yahoo',
            callback_data: 'showLinks_yh'
        }],
        [{
            text: 'Twitter',
            callback_data: 'showLinks_tw'
        }, {
            text: 'Discord',
            callback_data: 'showLinks_ds'
        }],
        [{
            text: 'Gaijin',
            callback_data: 'showLinks_gj'
        }, {
            text: 'Microsoft',
            callback_data: 'showLinks_ms'
        }],
        [{
            text: 'Payeer',
            callback_data: 'showLinks_pr'
        }, {
            text: 'PayPal',
            callback_data: 'showLinks_pp'
        }],
        [{
            text: 'Roblox',
            callback_data: 'showLinks_rb'
        }, {
            text: 'Amazon',
            callback_data: 'showLinks_az'
        }],
        [{
            text: 'Qiwi',
            callback_data: 'showLinks_qw'
        }, {
            text: 'Webmoney',
            callback_data: 'showLinks_wm'
        }],
    ]
    let id = Number(callbackQuery.data.split('_')[1])
    await bot.editMessageText(callbackQuery.message.text,
        {chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
            inline_keyboard: [
                ReplayList[id]?ReplayList[id]:[],
                ReplayList[id+1]?ReplayList[id+1]:[],
                ReplayList[id+2] ? ReplayList[id+2]:[],
                ReplayList[id+3] ? [{text:'‚¨ÖÔ∏è', callback_data: 'prevLinksReplay_'+id},{text:'‚û°Ô∏è', callback_data: 'nextLinksReplay_'+Number(id+3)}] : [{text:'‚¨ÖÔ∏è', callback_data: 'prevLinksReplay_'+id}]
            ]
        }
    }).catch(err => {})
}
bot.onText(/–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É/, (msg) => {
    bot.sendMessage(msg.chat.id, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º –º–æ–∂–Ω–æ —Ç—É—Ç üëâüèª ' + process.env.Admin)
})
bot.onText(/üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        let visit = 0
        let authVist = 0
        let accountsToday = 0
        let accountsWeekend = 0
        let accountsAllTime = 0
        let admin = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        const accounts = await account.find({
            tg_id: msg.chat.id
        })
        if(user.vip){
            admin = 'VIP –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        if (user.isAdmin) {
            admin = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        }
        user.links_info.map(link => {
            visit++
            if (link.auth_visit) {
                authVist++
            }
        })
        bot.sendMessage(msg.chat.id, `üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüÜî ID: <code>${msg.chat.id}</code>\nüéó –°—Ç–∞—Ç—É—Å: ${admin}\n\nüí∏ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: 0\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: 0\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: 0\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: 0\n\nüëÄ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${visit}\nüîê –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${authVist}`, {
            parse_mode: 'HTML'
        })
        //
    }
})
bot.onText(/üë• –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, `üëÄ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                        callback_data: 'showAccs_vk'
                    }, {
                        text: 'Instagram',
                        callback_data: 'showAccs_inst'
                    }],
                    [{
                        text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                        callback_data: 'showAccs_ok'
                    }, {
                        text: 'Facebook',
                        callback_data: 'showAccs_fb'
                    }],
                    [{
                        text: 'TikTok',
                        callback_data: 'showAccs_tt'
                    }, {
                        text: 'Steam',
                        callback_data: 'showAccs_st'
                    }],
                    [{
                        text: '‚û°Ô∏è',
                        callback_data: 'nextAccsReplay_3'
                    }]
                ]
            }
        })
    }
})
bot.onText(/üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        if (user.vip) {
            bot.sendMessage(msg.chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                            callback_data: 'showLinks_vk'
                        }, {
                            text: 'Instagram',
                            callback_data: 'showLinks_inst'
                        }],
                        [{
                            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                            callback_data: 'showLinks_ok'
                        }, {
                            text: 'Facebook',
                            callback_data: 'showLinks_fb'
                        }],
                        [{
                            text: 'TikTok',
                            callback_data: 'showLinks_tt'
                        }, {
                            text: 'Steam',
                            callback_data: 'showLinks_st'
                        }],
                        [{
                            text: '‚û°Ô∏è',
                            callback_data: 'nextLinksReplay_3'
                        }]
                    ]
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ <b>VIP</b> —Å—Ç–∞—Ç—É—Å–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–≤ –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ö—É–ø–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    }
})
bot.onText(/üìä –û –±–æ—Ç–µ/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        sendMessageWIK(msg.chat.id, `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ: <b>${(await data.find()).length}</b>\n–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: <b>${await bot.getChatMemberCount('@ssniffer')}</b>\n–í–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>${(await account.find()).length}</b>\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 2021 –≥–æ–¥–∞.`)
    }
})
bot.onText(/üëë VIP –°—Ç–∞—Ç—É—Å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        if (user.vip) {
            let vipType = ''
            if (user.vipType == '1') {
                vipType = '–†–∞–±–æ—á–∏–π'
            }
            if (user.vipType == '2') {
                vipType = '–õ—é–±–∏—Ç–µ–ª—å'
            }
            if (user.vipType == '3') {
                vipType = '–ü—Ä–æ—Ñ–∏'
            }
            if (user.vipType == '4') {
                vipType = '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'
            }
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –µ—Å—Ç—å <b>VIP</b> —Å—Ç–∞—Ç—É—Å [${vipType}].\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(new Date(user.vipDate))}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ü—Ä–æ–¥–ª–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        } else {
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ <b>VIP</b> —Å—Ç–∞—Ç—É—Å–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–≤ –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ö—É–ø–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    }
})
bot.onText(/üë• –ù–∞—à —á–∞—Ç/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, '–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ \n' + process.env.Chat)
    }
})
bot.onText(/‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, `<b>‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n<b>‚ô¶Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> - ${process.env.Admin}  (–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º)\n\n–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—Å–∞—Ç—ã –≤ —Å—Ç–∞—Ç—å–µ\n//–¢–£–¢ –°–°–´–õ–ö–ê//`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–ü—Ä–∞–≤–∏–ª–∞',
                        url: 'https://t.me/snifer_rules'
                    }]
                ]
            },
            parse_mode: 'HTML'
        })
    }
})
bot.onText(/‚ö°Ô∏è –ù–æ–≤–æ—Å—Ç–∏/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, '–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ \n' + process.env.Channel)
    }
})

bot.on("callback_query", async (callbackQuery) => {
    const msg = callbackQuery.message;
    if (callbackQuery.data.split('_')[0] == 'experiance') {
        bot.deleteMessage(msg.chat.id, msg.message_id)
        if (callbackQuery.data.split('_')[1] == 'true') {
            await data.updateOne({
                tg_id: msg.chat.id
            }, {
                expirience: '–î–∞'
            }, {
                upsert: true
            })
        } else {
            await data.updateOne({
                tg_id: msg.chat.id
            }, {
                expirience: '–ù–µ—Ç'
            }, {
                upsert: true
            })
        }
        bot.deleteMessage(msg.chat.id, msg.message_id - 1)
        bot.answerCallbackQuery(callbackQuery.id).then(() => {
            bot.sendMessage(msg.chat.id, '2. –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "–†–µ–∫–ª–∞–º–∞",
                            callback_data: "from_ad"
                        }, {
                            text: "–û—Ç –¥—Ä—É–∑–µ–π",
                            callback_data: "from_friend"
                        }],
                        [{
                            text: "–î—Ä—É–≥–æ–µ",
                            callback_data: "from_other"
                        }]
                    ]
                }
            })
        })
    }
    if (callbackQuery.data.split('_')[0] == 'from') {
        bot.deleteMessage(msg.chat.id, msg.message_id)
        if (callbackQuery.data.split('_')[1] == 'ad') {
            await data.updateOne({
                tg_id: msg.chat.id
            }, {
                from: '–†–µ–∫–ª–∞–º–∞'
            }, {
                upsert: true
            })
        } else if (callbackQuery.data.split('_')[1] == 'friend') {
            await data.updateOne({
                tg_id: msg.chat.id
            }, {
                from: '–û—Ç –¥—Ä—É–∑–µ–π'
            }, {
                upsert: true
            })
        } else {
            await data.updateOne({
                tg_id: msg.chat.id
            }, {
                from: '–î—Ä—É–≥–æ–µ'
            }, {
                upsert: true
            })
        }
        bot.answerCallbackQuery(callbackQuery.id).then(() => {
            bot.sendMessage(msg.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "üìÑ –ü—Ä–∞–≤–∏–ª–∞",
                            url: "https://t.me/snifer_rules"
                        }],
                        [{
                            text: "‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª",
                            callback_data: "rules_true"
                        }]
                    ]
                }
            })
        })
    }
    if (callbackQuery.data.split('_')[0] == 'rules') {
        bot.deleteMessage(msg.chat.id, msg.message_id)
        bot.answerCallbackQuery(callbackQuery.id).then(async () => {
            const condidate = await data.findOne({
                tg_id: msg.chat.id
            })
            bot.sendMessage(process.env.NotifyGroup, `üí£<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\nüÜîTG id: ${msg.chat.id}\n‚ô¶Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${msg.chat.username}\nüèÖ–û–ø—ã—Ç: <i>${condidate.expirience}</i>\nüó£–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: <i>${condidate.from}</i>\n‚öñÔ∏è–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å </b>`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                            callback_data: `accept_${msg.chat.id}`
                        }],
                        [{
                            text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data: `reject_${msg.chat.id}`
                        }]
                    ]
                },
                parse_mode: "HTML"
            })
            bot.sendMessage(msg.chat.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç.', {
                reply_markup: {
                    keyboard: [
                        ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"]
                    ],
                    resize_keyboard: true,
                }
            })
        })
    }
    if (callbackQuery.data.split('_')[0] == 'accept') {
        bot.editMessageText(callbackQuery.message.text.substr(0, callbackQuery.message.text.length - 21) + '–ü—Ä–∏–Ω—è—Ç–∞', {
            chat_id: msg.chat.id,
            message_id: msg.message_id
        }, {
            reply_markup: {
                inline_keyboard: []
            },
            parse_mode: "HTML"
        })
        await data.updateOne({
            tg_id: callbackQuery.data.split('_')[1]
        }, {
            isAccepted: 'true'
        }, {
            upsert: true
        })
        bot.sendMessage(callbackQuery.data.split('_')[1], '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!', {
            reply_markup: {
                keyboard: [
                    ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏'],
                    ['üë• –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã', 'üëë VIP –°—Ç–∞—Ç—É—Å'],
                    ['‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üë• –ù–∞—à —á–∞—Ç'],
                    ['‚ö°Ô∏è –ù–æ–≤–æ—Å—Ç–∏', 'üìä –û –±–æ—Ç–µ']
                ],
                resize_keyboard: true,
            }
        })
    }
    if (callbackQuery.data.split('_')[0] == 'reject') {
        bot.editMessageText(callbackQuery.message.text.substr(0, callbackQuery.message.text.length - 21) + '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', {
            chat_id: msg.chat.id,
            message_id: msg.message_id
        }, {
            reply_markup: {
                inline_keyboard: []
            },
            parse_mode: "HTML"
        })
        await data.updateOne({
            tg_id: callbackQuery.data.split('_')[1]
        }, {
            isAccepted: 'false'
        }, {
            upsert: true
        })
        bot.sendMessage(callbackQuery.data.split('_')[1], `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –æ—Ç–±–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.`, {
            reply_markup: {
                keyboard: [
                    ["–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"],
                    ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"]
                ],
                resize_keyboard: true,
            }
        })
    }
    if (callbackQuery.data == 'show_vip') {
        bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id)
        bot.sendMessage(callbackQuery.message.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–†–∞–±–æ—á–∏–π [50‚ÇΩ-7–¥–Ω–µ–π]',
                        callback_data: 'vip_1'
                    }],
                    [{
                        text: '–õ—é–±–∏—Ç–µ–ª—å [300‚ÇΩ-30–¥–Ω–µ–π]',
                        callback_data: 'vip_2'
                    }],
                    [{
                        text: '–ü—Ä–æ—Ñ–∏ [500‚ÇΩ-60–¥–Ω–µ–π]',
                        callback_data: 'vip_3'
                    }],
                    [{
                        text: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å[2500‚ÇΩ-30–¥–Ω–µ–π]',
                        callback_data: 'vip_4'
                    }]
                ]
            }
        })
    }
    if (callbackQuery.data.split('_')[0] == 'vip') {
        bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id)
        if (callbackQuery.data.split('_')[1] == '1') {
            bot.sendMessage(msg.chat.id, '<b>VIP - –†–∞–±–æ—á–∏–π</b>\n<i>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤</i>\n\n- –í–∏–¥–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–µ–π–∫-—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n- –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö\n- –î–æ—Å—Ç—É–ø–Ω—ã VIP —Ñ–µ–π–∫–∏\n- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã\n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: –í –±—Ä–∞—É–∑–µ—Ä–µ, Telegram, VK\n- <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–∏–¥–Ω—ã "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º</b>"', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "–ö—É–ø–∏—Ç—å VIP –∑–∞ 50‚ÇΩ",
                            callback_data: 'buy_vip1'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
        if (callbackQuery.data.split('_')[1] == '2') {
            bot.sendMessage(msg.chat.id, '<b>VIP - –õ—é–±–∏—Ç–µ–ª—å</b>\n<i>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n\n- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n- –í–∏–¥–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–µ–π–∫-—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n- –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö\n- –î–æ—Å—Ç—É–ø–Ω—ã VIP —Ñ–µ–π–∫–∏\n- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã\n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: –í –±—Ä–∞—É–∑–µ—Ä–µ, Telegram, VK\n- <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º!</b>"', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "–ö—É–ø–∏—Ç—å VIP –∑–∞ 300‚ÇΩ",
                            callback_data: 'buy_vip2'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
        if (callbackQuery.data.split('_')[1] == '3') {
            bot.sendMessage(msg.chat.id, '<b>VIP - –ü—Ä–æ—Ñ–∏</b>\n<i>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫—Ä—É–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n\n- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n- –í–∏–¥–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–µ–π–∫-—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n- –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö\n- –î–æ—Å—Ç—É–ø–Ω—ã VIP —Ñ–µ–π–∫–∏\n- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã\n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: –í –±—Ä–∞—É–∑–µ—Ä–µ, Telegram, VK\n- <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º!</b>"', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "–ö—É–ø–∏—Ç—å VIP –∑–∞ 500‚ÇΩ",
                            callback_data: 'buy_vip3'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
        if (callbackQuery.data.split('_')[1] == '4') {
            bot.sendMessage(msg.chat.id, '<b>VIP - –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å</b>\n<i>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ </i>\n\n- 1 –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂\n- –°–≤—è–∑—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ 24/7!\n- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n- –í–∏–¥–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–µ–π–∫-—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n- –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö\n- –î–æ—Å—Ç—É–ø–Ω—ã VIP —Ñ–µ–π–∫–∏\n- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã\n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: –í –±—Ä–∞—É–∑–µ—Ä–µ, Telegram, VK\n- <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º!</b>"', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "–ö—É–ø–∏—Ç—å VIP –∑–∞ 2500‚ÇΩ",
                            callback_data: 'buy_vip4'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    }
    if (callbackQuery.data.split('_')[0] == 'buy') {
        let user = await data.findOne({
            tg_id: callbackQuery.message.chat.id
        })
        if (callbackQuery.data.split('_')[1] == 'vip1') {
            if (user.balance >= 50) {
                if (user.vip) {
                    let date = new Date(user.vipDate)
                    date.setDate(date.getDate() + 7)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 50,
                        vip: true,
                        vipDate: date,
                        vipType: '1'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                } else {
                    let date = new Date()
                    date.setDate(date.getDate() + 7)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 50,
                        vip: true,
                        vipDate: date,
                        vipType: '1'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                }
            } else {
                bot.editMessageText('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç—Å—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' + process.env.Admin, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id
                })
            }
        }
        if (callbackQuery.data.split('_')[1] == 'vip2') {
            if (user.balance >= 300) {
                if (user.vip) {
                    let date = new Date(user.vipDate)
                    date.setDate(date.getDate() + 30)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 300,
                        vip: true,
                        vipDate: date,
                        vipType: '2'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                } else {
                    let date = new Date()
                    date.setDate(date.getDate() + 30)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 300,
                        vip: true,
                        vipDate: date,
                        vipType: '2'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                }
            } else {
                bot.editMessageText('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç—Å—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' + process.env.Admin, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id
                })
            }
        }
        if (callbackQuery.data.split('_')[1] == 'vip3') {
            if (user.balance >= 500) {
                if (user.vip) {
                    let date = new Date(user.vipDate)
                    date.setDate(date.getDate() + 60)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 500,
                        vip: true,
                        vipDate: date,
                        vipType: '3'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                } else {
                    let date = new Date()
                    date.setDate(date.getDate() + 60)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 500,
                        vip: true,
                        vipDate: date,
                        vipType: '3'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                }
            } else {
                bot.editMessageText('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç—Å—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' + process.env.Admin, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id
                })
            }
        }
        if (callbackQuery.data.split('_')[1] == 'vip4') {
            if (user.balance >= 2500) {
                if (user.vip) {
                    let date = new Date(user.vipDate)
                    date.setDate(date.getDate() + 30)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 2500,
                        vip: true,
                        vipDate: date,
                        vipType: '4'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                } else {
                    let date = new Date()
                    date.setDate(date.getDate() + 30)
                    await data.updateOne({
                        tg_id: callbackQuery.message.chat.id
                    }, {
                        balance: user.balance - 2500,
                        vip: true,
                        vipDate: date,
                        vipType: '4'
                    }, {
                        upsert: true
                    }).catch(err => console.log(err))
                    bot.editMessageText(`VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${StringDate(date)}`, {
                        chat_id: callbackQuery.message.chat.id,
                        message_id: callbackQuery.message.message_id
                    })
                }
            } else {
                bot.editMessageText('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç—Å—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' + process.env.Admin, {
                    chat_id: callbackQuery.message.chat.id,
                    message_id: callbackQuery.message.message_id
                })
            }
        }
    }
    if (callbackQuery.data.split('_')[0] == 'prevAcc') {
        PreviousAccount(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'nextAcc') {
        NextAccount(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'showAccs') {
        if (callbackQuery.data.split('_')[1] == 'all') {
            bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id)
            bot.sendMessage(msg.chat.id, `üëÄ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                            callback_data: 'showAccs_vk'
                        }, {
                            text: 'Instagram',
                            callback_data: 'showAccs_inst'
                        }],
                        [{
                            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                            callback_data: 'showAccs_ok'
                        }, {
                            text: 'Facebook',
                            callback_data: 'showAccs_fb'
                        }],
                        [{
                            text: 'TikTok',
                            callback_data: 'showAccs_tt'
                        }, {
                            text: 'Steam',
                            callback_data: 'showAccs_st'
                        }],
                        [{
                            text: '‚û°Ô∏è',
                            callback_data: 'nextAccsReplay_3'
                        }]
                    ]
                }
            })
        } else {
            ShowAccounts(callbackQuery)
        }
    }
    if (callbackQuery.data.split('_')[0] == 'showLinks') {
        ShowLinks(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'showLinkInfo') {
        ShowLinkInfo(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'showNextLinkQuery') {
        showNextLink(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'showPrevLinkQuery') {
        showPrevLink(callbackQuery)
    }
    if (callbackQuery.data == 'showLinksMenu') {
        bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id)
        bot.sendMessage(msg.chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                        callback_data: 'showLinks_vk'
                    }, {
                        text: 'Instagram',
                        callback_data: 'showLinks_inst'
                    }],
                    [{
                        text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                        callback_data: 'showLinks_ok'
                    }, {
                        text: 'Facebook',
                        callback_data: 'showLinks_fb'
                    }],
                    [{
                        text: 'TikTok',
                        callback_data: 'showLinks_tt'
                    }, {
                        text: 'Steam',
                        callback_data: 'showLinks_st'
                    }],
                    [{
                        text: '‚û°Ô∏è',
                        callback_data: 'nextLinksReplay_3'
                    }]
                    
                ]
            }
        })
    }
    if (callbackQuery.data.split('_')[0] == 'nextAccsReplay') {
        ShowNextAccsReplay(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'prevLinksReplay') {
        ShowPrevLinksReplay(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'nextLinksReplay') {
        ShowNextLinksReplay(callbackQuery)
    }
    if (callbackQuery.data.split('_')[0] == 'prevLinksReplay') {
        ShowPrevLinksReplay(callbackQuery)
    }
})

bot.onText(/\/givebalance/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && (msg.text.split(' ')[2] !== '' && Number.isInteger(Number(msg.text.split(' ')[2])))) {
            await data.findOne({
                tg_id: Number(msg.text.split(' ')[1])
            }).then(async (user) => {
                if (user) {
                    await data.updateOne({
                        tg_id: Number(msg.text.split(' ')[1])
                    }, {
                        balance: Number(user.balance) + Number(msg.text.split(' ')[2]),
                    }, {
                        upsert: true
                    }).then((data) => {
                        if (data) {
                            bot.sendMessage(msg.chat.id, `–ë–∞–ª–∞–Ω—Å @${user.login} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (${user.balance}‚ÇΩ ‚Üí ${user.balance+Number(msg.text.split(' ')[2])}‚ÇΩ)`)
                            bot.sendMessage(Number(msg.text.split(' ')[1]), `–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (${user.balance}‚ÇΩ ‚Üí ${user.balance+Number(msg.text.split(' ')[2])}‚ÇΩ)`)
                        }
                    }).catch(err => {
                        bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                    });
                } else {
                    bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/givebalnce <userID> <amount>')
        }
    }
})
bot.onText(/\/unvip/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
            await data.findOne({
                tg_id: Number(msg.text.split(' ')[1])
            }).then(async (user) => {
                if (user) {
                    await data.updateOne({
                        tg_id: Number(msg.text.split(' ')[1])
                    }, {
                        vip: false,
                        vipDate: '',
                        vipType: '',
                    }, {
                        upsert: true
                    }).then((data) => {
                        if (data) {
                            bot.sendMessage(msg.text.split(' ')[1], `–í–∞—à —Å—Ç–∞—Ç—É—Å VIP –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.`)
                            bot.sendMessage(msg.chat.id, `–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${user.login} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç VIP —Å—Ç–∞—Ç—É—Å.`)
                        }
                    }).catch(err => {
                        bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                    });
                } else {
                    bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/givebalnce <userID> <amount>')
        }
    }
})
bot.onText(/\/clear/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
            await data.findOne({
                tg_id: Number(msg.text.split(' ')[1])
            }).then(async (user) => {
                if (user) {
                    await data.deleteOne({
                        tg_id: Number(msg.text.split(' ')[1])
                    }).then((data) => {
                        if (data) {
                            bot.sendMessage(msg.chat.id, `–ê–∫–∫–∞—É–Ω—Ç @${user.login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`)
                        }
                    }).catch(err => {
                        bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                    });
                } else {
                    bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <userID>')
        }
    }
})
bot.onText(/\/addnewlink/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
            await link.findOne({
                link: msg.text.split(' ')[1]
            }).then(async (user) => {
                let querys = [],type = ''
                msg.text.split(' ')[2].split(',').map(e=>{
                    e=e.substr(1,e.length-2).split('|')
                    type = e[1]
                    querys[e[0]]={name:e[2], description:e[3].split('_').join(' '), image: e[4], redirect: e[5]}
                })
                 await new link({
                        link: msg.text.split(' ')[1],
                        type: type,
                        query: querys,
                }).save().then(() => {
                    bot.sendMessage(msg.chat.id, '–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
                })
            })
        } else {
            bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <userID>')
        }
    }
})
bot.onText(/\/removelink/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '') {
            await link.findOne({
                link: msg.text.split(' ')[1]
            }).then(async (link) => {
                if(link){
                    if(msg.text.split(' ')[2]){
                        let query = link.query
                        query.splice(Number(msg.text.split(' ')[2]), 1)
                        console.log(query)
                        await link.updateOne({
                            link: msg.text.split(' ')[1]
                        }, {
                            query: query
                        }, {
                            upsert: true
                        }).then((data) => {
                            if (data) {
                                bot.sendMessage(msg.chat.id, `–®–∞–±–ª–æ–Ω #${msg.text.split(' ')[2]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`)
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        });
                    }else{
                        await link.deleteOne({
                            link: msg.text.split(' ')[1]
                        }).then((data) => {
                            if (data) {
                                bot.sendMessage(msg.chat.id, `–°—Å—ã–ª–∫–∞ ${msg.text.split(' ')[1]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`)
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        });
                    }
                }else{
                    bot.sendMessage(msg.chat.id, '–¢–∞–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <userID>')
        }
    }
})
bot.on('message', msg => {
    console.log(msg)
})