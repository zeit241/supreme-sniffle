const bot = require('./createBot')
const adminCommands = require('./adminCommands')
const data = require('./database/models/userData')
const account = require('./database/models/account')
const link = require('./database/models/link')
const isAuth = require('./middleware/AuthCheck')
const {GetStringDate,GetDaysCount,VipCheck} = require('./server/tools')
const {vip} = require('./objects')

bot.onText(/\/start/, (msg) => {
    isAuth(msg)
})
bot.onText(/–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É/,async (msg) => {
    if(isAuth){
      bot.sendMessage(msg.chat.id, '1. –ë—ã–ª –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ —Ñ–∏—à–∏–Ω–≥–µ?', {
        reply_markup: {
          inline_keyboard: [
            [{
              text: "–î–∞",
              callback_data: "experiance_true"
            }, {
              text: "–ù–µ—Ç",
              callback_data: "experiance_false"
            }],
          ]
        }
    })}
})
bot.onText(/–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É/, (msg) => {
    bot.sendMessage(msg.chat.id, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º –º–æ–∂–Ω–æ —Ç—É—Ç üëâüèª ' + process.env.Admin)
})
bot.onText(/üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        let today = 0, week = 0, month = 0
        const accounts = await account.find({
            tg_id: msg.chat.id
        })
        accounts.map(account =>{
            let x = GetDaysCount(account.date)
            if(x>=0&&x<=1){
                today++
                week++
                month++
            }
            if(x>1 && x<=7){
                week++
                month++
            }
            if(x>7 && x<=30){
                month++ 
            }
        })
        let admin = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        if (user.vip) {
            admin = 'VIP –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        if (user.isAdmin) {
            admin = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        }
        user.links_info.map(link => {
            visit++
            if (link.auth_visit) {
                authVist++
            }
        })
        await bot.sendMessage(msg.chat.id, `üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüÜî ID: <code>${msg.chat.id}</code>\nüéó –°—Ç–∞—Ç—É—Å: ${admin}\n\nüí∏ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${today}\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${week}\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: ${month}\n‚òòÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${accounts.length}\n\nüëÄ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${accounts.length}\nüîê –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: ${accounts.length}`, {
            parse_mode: 'HTML'
        })
    }
})
bot.onText(/üë• –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, `üëÄ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                        callback_data: 'showAccs_vk'
                    }, {
                        text: 'Instagram',
                        callback_data: 'showAccs_inst'
                    }],
                    [{
                        text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                        callback_data: 'showAccs_ok'
                    }, {
                        text: 'Facebook',
                        callback_data: 'showAccs_fb'
                    }],
                    [{
                        text: 'TikTok',
                        callback_data: 'showAccs_tt'
                    }, {
                        text: 'Steam',
                        callback_data: 'showAccs_st'
                    }],
                    [{
                        text: '‚û°Ô∏è',
                        callback_data: 'nextAccsReplay_3'
                    }]
                ]
            }
        })
    }
})
bot.onText(/üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        if (user.vip) {
            bot.sendMessage(msg.chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
                            callback_data: 'showLinks_vk'
                        }, {
                            text: 'Instagram',
                            callback_data: 'showLinks_inst'
                        }],
                        [{
                            text: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                            callback_data: 'showLinks_ok'
                        }, {
                            text: 'Facebook',
                            callback_data: 'showLinks_fb'
                        }],
                        [{
                            text: 'TikTok',
                            callback_data: 'showLinks_tt'
                        }, {
                            text: 'Steam',
                            callback_data: 'showLinks_st'
                        }],
                        [{
                            text: '‚û°Ô∏è',
                            callback_data: 'nextLinksReplay_3'
                        }]
                    ]
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ <b>VIP</b> —Å—Ç–∞—Ç—É—Å–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–≤ –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ö—É–ø–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    }
})
bot.onText(/üìä –û –±–æ—Ç–µ/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –±–æ—Ç–µ: <b>${(await data.find()).length}</b>\n–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: <b>${await bot.getChatMemberCount('@ssniffer')}</b>\n–í–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>${(await account.find()).length}</b>\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 2021 –≥–æ–¥–∞.`, {
            parse_mode: 'HTML'
        })
    }
})
bot.onText(/üëë VIP –°—Ç–∞—Ç—É—Å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    console.log()
    if (user.isAccepted == 'true') {
        if (user.vip) {
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –µ—Å—Ç—å <b>VIP</b> —Å—Ç–∞—Ç—É—Å [${vip[Number(user.vipType)].name}].\nVIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${GetStringDate(new Date(user.vipDate))}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ü—Ä–æ–¥–ª–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        } else {
            bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ <b>VIP</b> —Å—Ç–∞—Ç—É—Å–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–≤ –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ö—É–ø–∏—Ç—å VIP',
                            callback_data: 'show_vip'
                        }]
                    ]
                },
                parse_mode: 'HTML'
            })
        }
    }
})
bot.onText(/üë• –ù–∞—à —á–∞—Ç/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, '–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ \n' + process.env.Chat)
    }
})
bot.onText(/‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, `<b>‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n<b>‚ô¶Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> - ${process.env.Admin}  (–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º)\n\n–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—Å–∞—Ç—ã –≤ —Å—Ç–∞—Ç—å–µ\nhttps://teletype.in/@ssniffer/Nj73iy7Ps7z`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–ü—Ä–∞–≤–∏–ª–∞',
                        url: 'https://t.me/joinchat/1yuUy9l4yYQ2N2My'
                    }]
                ]
            },
            parse_mode: 'HTML',
            disable_web_page_preview: true
        })
    }
})
bot.onText(/‚ö°Ô∏è –ù–æ–≤–æ—Å—Ç–∏/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, '–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ \n' + process.env.Channel)
    }
})
bot.onText(/üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, `üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n\n–ß—Ç–æ –¥–∞—ë—Ç –±–æ–Ω—É—Å?\n- –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏, (35‚ÇΩ –≤ –ü–æ–¥–∞—Ä–æ–∫üéÅüòª)\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ (https://t.me/ssniffero). –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –æ—Ç–∑—ã–≤ –Ω–µ —É–¥–∞–ª–∏–ª–∏.\n–ë–æ–Ω—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑, –ø–æ–≤—Ç–æ—Ä–Ω–æ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–ª—å–∑—è\n\nüòª –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@vincicash_s).`,{
            reply_markup:{
                inline_keyboard: [
                    [{text: 'üìú –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url:'https://t.me/ssniffero'},{text: 'üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å', url:'https://t.me/vincicash_s'}]
                ]
            },
            disable_web_page_preview: true
        })
    }
})
bot.onText(/üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {
        bot.sendMessage(msg.chat.id, `üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance} RUB\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 —Ä—É–±–ª–µ–π\n\nüíö –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QIWI\nüíú –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ÆMoney\nüß° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebMoney\n\n–ù–µ –Ω–∞—à–ª–∏ –¥–ª—è —Å–µ–±—è —É–¥–æ–±–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –Ω–∏–∂–µ –∏ –º—ã —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ–º –¥–ª—è –í–∞—Å\n–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å: @vincicash_s\n\n–ö–∞–∫–æ–π  VIP —Å—Ç–∞—Ç—É—Å –ª—É—á—à–µ –≤–∑—è—Ç—å?\nhttps://teletype.in/@ssniffer/howbuy\n\n–ê —Ç–∞–∫ –∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è –ø–æ –Ω–∞—à–µ–º—É –±–æ—Ç—É –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ‚§µÔ∏è`,{
            reply_markup:{
                inline_keyboard:[
                    [{text:'üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å', url: 'https://t.me/VinciCash_S'}],
                    [{text:'üóÇ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', callback_data: 'transactions'},{text:'üçÄ –û—Ç–∑—ã–≤—ã', url: 'https://t.me/ssniffero'}]
                ]
            },
            disable_web_page_preview: true
        })
    }
})
bot.onText(/üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if (user.isAccepted == 'true') {

    }
})

bot.on('message', async (msg) => {
    const user = await data.findOne({
        tg_id: msg.chat.id
    })
    if(user.vip){
        if(VipCheck(user.vipDate)){
            setTimeout(async () =>{
                await data.updateOne({
                    tg_id: msg.chat.id
                }, {
                    vip: false,
                    vipType: '',
                    vipDate: ''
                }, {
                    upsert: true
                })
                bot.sendMessage(msg.chat.id, '–í–∞—à VIP —Å—Ç–∞—Ç—É—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ',{
                    reply_markup:{
                        inline_keyboard: [
                            [{text: '–ö—É–ø–∏—Ç—å VIP', callback_data: 'show_vip'}]
                        ]
                    }
                })
            }, 200)
        }
    }
})