const bot = require('./createBot')
const data = require('./database/models/userData')
const account = require('./database/models/account')
const link = require('./database/models/link')
const {GetDateFormat,GetStringDate} = require('./server/tools')
    bot.onText(/\/givebalance/, async (msg) => {
        const user = await data.findOne({
            tg_id: msg.from.id
        })
        if (user.isAdmin) {
            if (msg.text.split(' ')[1] !== '' && (msg.text.split(' ')[2] !== '' && Number.isInteger(Number(msg.text.split(' ')[2])))) {
                await data.findOne({
                    tg_id: Number(msg.text.split(' ')[1])
                }).then(async (user) => {
                    if (user) {
                        await data.updateOne({
                            tg_id: Number(msg.text.split(' ')[1])
                        }, {
                            balance: Number(user.balance) + Number(msg.text.split(' ')[2]),
                        }, {
                            upsert: true
                        }).then((data) => {
                            if (data) {
                                bot.sendMessage(msg.chat.id, `–ë–∞–ª–∞–Ω—Å @${user.login} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (${user.balance}‚ÇΩ ‚Üí ${user.balance+Number(msg.text.split(' ')[2])}‚ÇΩ)`)
                                bot.sendMessage(Number(msg.text.split(' ')[1]), `–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (${user.balance}‚ÇΩ ‚Üí ${user.balance+Number(msg.text.split(' ')[2])}‚ÇΩ)`)
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        });
                    } else {
                        bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    }
                })
            } else {
                bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/givebalnce <userID> <amount>')
            }
        }
    })
    bot.onText(/\/unvip/, async (msg) => {
        const user = await data.findOne({
            tg_id: msg.from.id
        })
        if (user.isAdmin) {
            if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
                await data.findOne({
                    tg_id: Number(msg.text.split(' ')[1])
                }).then(async (user) => {
                    if (user) {
                        await data.updateOne({
                            tg_id: Number(msg.text.split(' ')[1])
                        }, {
                            vip: false,
                            vipDate: '',
                            vipType: '',
                        }, {
                            upsert: true
                        }).then((data) => {
                            if (data) {
                                bot.sendMessage(msg.text.split(' ')[1], `–í–∞—à —Å—Ç–∞—Ç—É—Å VIP –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.`)
                                bot.sendMessage(msg.chat.id, `–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${user.login} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç VIP —Å—Ç–∞—Ç—É—Å.`)
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        });
                    } else {
                        bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    }
                })
            } else {
                bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/givebalnce <userID> <amount>')
            }
        }
    })
    bot.onText(/\/clear/, async (msg) => {
        const user = await data.findOne({
            tg_id: msg.from.id
        })
        if (user.isAdmin) {
            if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
                await data.findOne({
                    tg_id: Number(msg.text.split(' ')[1])
                }).then(async (user) => {
                    if (user) {
                        await data.deleteOne({
                            tg_id: Number(msg.text.split(' ')[1])
                        }).then((data) => {
                            if (data) {
                                bot.sendMessage(msg.chat.id, `–ê–∫–∫–∞—É–Ω—Ç @${user.login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`)
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        });
                    } else {
                        bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    }
                })
            } else {
                bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <userID>')
            }
        }
    })
    bot.onText(/\/addnewlink/, async (msg) => {
        const user = await data.findOne({
            tg_id: msg.from.id
        })
        if (user.isAdmin) {
            if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
                await link.findOne({
                    link: msg.text.split(' ')[1]
                }).then(async (user) => {
                    let querys = [],type = ''
                    msg.text.split(' ')[2].split(',').map(e=>{
                        e=e.substr(1,e.length-2).split('|')
                        type = e[1]
                        querys[e[0]]={name:e[2], description:e[3].split('_').join(' '), image: e[4], redirect: e[5]}
                    })
                     await new link({
                            link: msg.text.split(' ')[1],
                            type: type,
                            query: querys,
                    }).save().then(() => {
                        bot.sendMessage(msg.chat.id, '–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
                    })
                })
            } else {
                bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <userID>')
            }
        }
    })
    bot.onText(/\/removelink/, async (msg) => {
        const user = await data.findOne({
            tg_id: msg.from.id
        })
        if (user.isAdmin) {
            if (msg.text.split(' ')[1] !== '') {
                await link.findOne({
                    link: msg.text.split(' ')[1]
                }).then(async (link) => {
                    if(link){
                        if(msg.text.split(' ')[2]){
                            let query = link.query
                            query.splice(Number(msg.text.split(' ')[2]), 1)
                            console.log(query)
                            await link.updateOne({
                                link: msg.text.split(' ')[1]
                            }, {
                                query: query
                            }, {
                                upsert: true
                            }).then((data) => {
                                if (data) {
                                    bot.sendMessage(msg.chat.id, `–®–∞–±–ª–æ–Ω #${msg.text.split(' ')[2]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`)
                                }
                            }).catch(err => {
                                bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                            });
                        }else{
                            await link.deleteOne({
                                link: msg.text.split(' ')[1]
                            }).then((data) => {
                                if (data) {
                                    bot.sendMessage(msg.chat.id, `–°—Å—ã–ª–∫–∞ ${msg.text.split(' ')[1]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`)
                                }
                            }).catch(err => {
                                bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                            });
                        }
                    }else{
                        bot.sendMessage(msg.chat.id, '–¢–∞–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
                    }
                })
            } else {
                bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <userID>')
            }
        }
    })  
    bot.onText(/\/getuserinfo/, async (msg) => {
        const user = await data.findOne({
            tg_id: msg.from.id
        })
        if (user.isAdmin) {
            if (msg.text.split(' ')[1] !== '') {
                await data.findOne({
                    tg_id: Number(msg.text.split(' ')[1])
                }).then(async (user) => {
                    let accounts = await account.find({
                        tg_id: Number(msg.text.split(' ')[1])
                    })
                    let users = await data.find({
                        ref_id: Number(msg.text.split(' ')[1])
                    })
                    if (user) {
                        bot.sendMessage(msg.chat.id, `üë®üèª‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.login}\n\nüÜî ID: ${user.tg_id}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}\nüë®‚Äçüë©‚Äçüëß‚Äçüëß –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${users.length||0}\nüë®‚Äçüë©‚Äçüëß‚Äçüëß –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.ref_balance||0}\nüë®‚Äçüë©‚Äçüëß‚Äçüëß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length||0}\n\nüëë VIP: ${user.vip?'‚úÖ':'üö´'}\n‚è≥ VIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑: ${user.vip?GetStringDate(new Date(user.vipDate)):'üö´'}\n\nüìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${GetDateFormat(user.reg_date)}`)
                    } else {
                        bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    }
                })
            } else {
                bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/getuserinfo <userID>')
            }
        }
    })
    bot.onText(/\/sendall/, async (msg) => {
        const user = await data.findOne({
            tg_id: msg.from.id
        })
        if (user.isAdmin) {
            let x = await bot.sendMessage(msg.chat.id, `–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n–î–ª—è —ç—Ç–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏`)
            bot.onReplyToMessage(x.chat.id, x.message_id, async function sendToAll(msg){
                const users = await data.find()
                users.reverse()
                let c = 0, b = 0
                users.map(async user => {
                    if(msg.photo){           
                        bot.sendPhoto(user.tg_id, msg.photo[msg.photo.length-1].file_id, {
                            caption: msg.caption
                        })
                    }else{
                        await bot.sendMessage(user.tg_id, msg.text).then((msg) => c++).catch(e=>{b++})
                    }
                })
                await bot.sendMessage(x.chat.id, `–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞`)
            })
        }
    })