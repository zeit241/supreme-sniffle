const bot = require('./createBot')
const data = require('./database/models/userData')
const account = require('./database/models/account')
const link = require('./database/models/link')
const promocode = require('./database/models/promo')
const {
    GetDateFormat,
    GetStringDate
} = require('./server/tools')
const {
    baseModelName
} = require('./database/models/account')
bot.onText(/\/givebalance/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && (msg.text.split(' ')[2] !== '' && Number.isInteger(Number(msg.text.split(' ')[2])))) {
            await data.findOne({
                tg_id: Number(msg.text.split(' ')[1])
            }).then(async (user) => {
                if (user) {
                    let transactions = user.transactions
                    transactions.push({type: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', value: '+'+msg.text.split(' ')[2], date: new Date()})
                    await data.updateOne({
                        tg_id: Number(msg.text.split(' ')[1])
                    }, {
                        balance: Number(user.balance) + Number(msg.text.split(' ')[2]),
                        transactions: transactions
                    }, {
                        upsert: true
                    }).then(async(e) => {
                        if (e) {
                            if(user.ref_id && user.ref_id!=0){
                                let x = await data.findOne({tg_id: user.ref_id})
                                await data.updateOne({
                                    tg_id: user.ref_id
                                },{ref_balance: Number(x.ref_balance||0) + ((Number(msg.text.split(' ')[2])*20)/100), transactions: [...x.transactions, {type: '–†–µ—Ñ. —Å–∏—Å—Ç–µ–º–∞', value: '+'+((Number(msg.text.split(' ')[2])*20)/100), date: new Date()}]}).then(e=>{
                                    bot.sendMessage(user.ref_id, `üí∏ –í–∞—à –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (${x.ref_balance||0}‚ÇΩ ‚Üí ${Number(x.ref_balance||0) + ((Number(msg.text.split(' ')[2])*20)/100)}‚ÇΩ)`)
                                })
                            }
                            bot.sendMessage(msg.chat.id, `üí∏ –ë–∞–ª–∞–Ω—Å ${'@'+user.login||user.tg_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (${user.balance}‚ÇΩ ‚Üí ${user.balance+Number(msg.text.split(' ')[2])}‚ÇΩ)`)
                            bot.sendMessage(Number(msg.text.split(' ')[1]), `üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (${user.balance}‚ÇΩ ‚Üí ${user.balance+Number(msg.text.split(' ')[2])}‚ÇΩ)`)
                        }
                    }).catch(err => {
                        console.error(err)
                        bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                    });
                } else {
                    bot.sendMessage(msg.chat.id, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/givebalnce <ID> <–°–£–ú–ú–ê>')
        }
    }
})
bot.onText(/\/unvip/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
            await data.findOne({
                tg_id: Number(msg.text.split(' ')[1])
            }).then(async (user) => {
                if (user) {
                    await data.updateOne({
                        tg_id: Number(msg.text.split(' ')[1])
                    }, {
                        vip: false,
                        vipType: '',
                        vipDate: new Date()
                    }, {
                        upsert: true
                    }).then((data) => {
                        if (data) {
                            bot.sendMessage(msg.text.split(' ')[1], `ü§¥üèª –í–∞—à —Å—Ç–∞—Ç—É—Å VIP –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.`)
                            bot.sendMessage(msg.chat.id, `‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${'@'+user.login||user.tg_id} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç VIP —Å—Ç–∞—Ç—É—Å.`)
                        }
                    }).catch(err => {
                        bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                    });
                } else {
                    bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id,  '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/givebalnce <ID> <–°–£–ú–ú–ê>')
        }
    }
})
bot.onText(/\/clear/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
            await data.findOne({
                tg_id: Number(msg.text.split(' ')[1])
            }).then(async (user) => {
                if (user) {
                    await data.deleteOne({
                        tg_id: Number(msg.text.split(' ')[1])
                    }).then((data) => {
                        if (data) {
                            bot.sendMessage(msg.chat.id, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${'@'+user.login||user.tg_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`)
                        }
                    }).catch(err => {
                        bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                    });
                } else {
                    bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <ID>')
        }
    }
})
bot.onText(/\/addnewlink/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '' && msg.text.split(' ')[2] !== '') {
            await link.findOne({
                link: msg.text.split(' ')[1]
            }).then(async (user) => {
                let querys = [],
                    type = ''
                msg.text.split(' ')[2].split(',').map(e => {
                    e = e.substr(1, e.length - 2).split('|')
                    type = e[1]
                    querys[e[0]] = {
                        name: e[2],
                        description: e[3].split('_').join(' '),
                        image: e[4],
                        redirect: e[5]
                    }
                })
                await new link({
                    link: msg.text.split(' ')[1],
                    type: type,
                    query: querys,
                }).save().then(() => {
                    bot.sendMessage(msg.chat.id, '‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
                })
            })
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/clear <ID>')
        }
    }
})
bot.onText(/\/removelink/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '') {
            await link.findOne({
                link: msg.text.split(' ')[1]
            }).then(async (link) => {
                if (link) {
                    if (msg.text.split(' ')[2]) {
                        let query = link.query
                        query.splice(Number(msg.text.split(' ')[2]), 1)
                        console.log(query)
                        await link.updateOne({
                            link: msg.text.split(' ')[1]
                        }, {
                            query: query
                        }, {
                            upsert: true
                        }).then((data) => {
                            if (data) {
                                bot.sendMessage(msg.chat.id, `‚úÖ –®–∞–±–ª–æ–Ω #${msg.text.split(' ')[2]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`)
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        });
                    } else {
                        await link.deleteOne({
                            link: msg.text.split(' ')[1]
                        }).then((data) => {
                            if (data) {
                                bot.sendMessage(msg.chat.id, `‚úÖ –°—Å—ã–ª–∫–∞ ${msg.text.split(' ')[1]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`)
                            }
                        }).catch(err => {
                            bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        });
                    }
                } else {
                    bot.sendMessage(msg.chat.id, '‚ùå –¢–∞–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/removelink <LINK>')
        }
    }
})
bot.onText(/\/getuserinfo/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '') {
            await data.findOne({
                tg_id: Number(msg.text.split(' ')[1])
            }).then(async (user) => {
                let accounts = await account.find({
                    tg_id: Number(msg.text.split(' ')[1])
                })
                let users = await data.find({
                    ref_id: Number(msg.text.split(' ')[1])
                })
                if (user) {
                    bot.sendMessage(msg.chat.id, `üë®üèª‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.login}\n\nüÜî ID: ${user.tg_id}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}\nüó£ –ü—Ä–∏–≥–ª–∞—à–µ–Ω: ${user.ref_id==0?'-':user.ref_id}\nüë®‚Äçüë©‚Äçüëß‚Äçüëß –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${users.length||0}\nüë®‚Äçüë©‚Äçüëß‚Äçüëß –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.ref_balance||0}\nüë®‚Äçüë©‚Äçüëß‚Äçüëß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length||0}\n\nüëë VIP: ${user.vip?'‚úÖ':'üö´'}\n‚è≥ VIP –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑: ${user.vip?GetStringDate(new Date(user.vipDate)):'üö´'}\n\nüìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${GetDateFormat(user.reg_date)}`)
                } else {
                    bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }
            })
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/getuserinfo <ID>')
        }
    }
})
bot.onText(/\/sendall/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        let x = await bot.sendMessage(msg.chat.id, `‚úâÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n–î–ª—è —ç—Ç–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏`)
        let y = bot.onReplyToMessage(x.chat.id, x.message_id, async function sendToAll(msg) {
            const users = await data.find()
            users.reverse()
            let c = 0,
                b = 0
            users.map(async user => {
                if (msg.photo) {
                    bot.sendPhoto(user.tg_id, msg.photo[msg.photo.length - 1].file_id, {
                        caption: msg.caption
                    })
                } else {
                    await bot.sendMessage(user.tg_id, msg.text).then((msg) => c++).catch(e => {
                        b++
                    })
                }
            })
            await bot.sendMessage(x.chat.id, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞`).then(it => bot.removeReplyListener(y))
        })
    }
})

bot.onText(/\/addpromo/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] && msg.text.split(' ')[2] && msg.text.split(' ')[3]) {
            console.log(msg.text.split(' ')[1])
            let promo = await promocode.findOne({
                promo: msg.text.split(' ')[1]
            })
            if(!promo){
                await new promocode({
                    type: 'balance',
                    promo: msg.text.split(' ')[1],
                    value: msg.text.split(' ')[2],
                    mactivation: Number(msg.text.split(' ')[3])
                }).save().then((data) => {
                    if (data) {
                        bot.sendMessage(msg.chat.id, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>${msg.text.split(' ')[1]}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,{
                            parse_mode: 'HTML'
                        })
                    }
                }).catch(err => {
                    bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                })
            }else{
                bot.sendMessage(msg.chat.id, '‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç.')
            }
        }else{
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/addpromo <PROMO> <VALUE> <MAX ACTIVATIONS>')
        }
    }
})
bot.onText(/\/promoinfo/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] !== '') {
            let promo = await promocode.findOne({
                promo: msg.text.split(' ')[1]
            })
            if(promo){
                let used = ''
                if(promo.activations>0){
                    promo.usedBy.map((e,i)=>{
                        used += `#${i+1}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª: @${e.login}\nID: <code>${e.tg_id}</code>\n–î–∞—Ç–∞: <code>${GetDateFormat(e.date)}</code>\n\n`
                    })
                }else{
                    used = '–ü—Ä–æ–º–æ–∫–æ–¥ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª.'
                }
                bot.sendMessage(msg.chat.id, `üéü –ü—Ä–æ–º–æ–∫–æ–¥ <code>${promo.promo}</code>\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${promo.activations}/${promo.mactivation}\n\n${used}`,{
                    parse_mode: 'HTML'
                })
            }else{
                bot.sendMessage(msg.chat.id, '‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç.')
            }
        }else{
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/promoinfo <PROMO>')
        } 
    }
})
bot.onText(/\/allpromoinfo/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        let promo = await promocode.find()
        if(promo.length>0){
            let str = '–ü—Ä–æ–º–æ–∫–æ–¥—ã\n\n'
            promo.map((e,i)=>{
                str+=`–ü—Ä–æ–º–æ–∫–æ–¥ #${i+1} <code>${e.promo}</code> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${e.activations}/${e.mactivation}\n`
            })
            bot.sendMessage(msg.chat.id, str,{
                parse_mode: 'HTML'
            })
        }else{
            bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç')
        } 
    }
})

bot.onText(/\/addvippromo/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1] && msg.text.split(' ')[2] && msg.text.split(' ')[3]) {
            console.log(msg.text.split(' ')[1])
            let promo = await promocode.findOne({
                promo: msg.text.split(' ')[1]
            })
            if(!promo){
                await new promocode({
                    type: 'vip',
                    promo: msg.text.split(' ')[1],
                    value: msg.text.split(' ')[2],
                    mactivation: Number(msg.text.split(' ')[3])
                }).save().then((data) => {
                    if (data) {
                        bot.sendMessage(msg.chat.id, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>${msg.text.split(' ')[1]}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,{
                            parse_mode: 'HTML'
                        })
                    }
                }).catch(err => {
                    bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                })
            }else{
                bot.sendMessage(msg.chat.id, '‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç.')
            }
        }else{
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/addpromo <PROMO> <VALUE> <MAX ACTIVATIONS>')
        }
    }
})
bot.onText(/\/removepromo/, async (msg) => {
    const user = await data.findOne({
        tg_id: msg.from.id
    })
    if (user.isAdmin) {
        if (msg.text.split(' ')[1]) {
            let promo = await promocode.findOne({
                promo: msg.text.split(' ')[1]
            })
            if(promo){
                await promocode.deleteOne({
                    promo: msg.text.split(' ')[1],
                }).then((data) => {
                    if (data) {
                        bot.sendMessage(msg.chat.id, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>${msg.text.split(' ')[1]}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,{
                            parse_mode: 'HTML'
                        })
                    }
                }).catch(err => {
                    bot.sendMessage(msg.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                })
            }else{
                bot.sendMessage(msg.chat.id, '‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç.')
            }
        }else{
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ\n/removepromo <PROMO> ')
        }
    }
})
// /ban
// /unban
// /sendto
// /setrefbalance
// /setpinmessage